import mysql.connector
import os
from dotenv import load_dotenv
import sys
import time

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# C·∫•u h√¨nh k·∫øt n·ªëi local
local_config = {
    'host': 'localhost',
    'user': 'nhatpm',
    'password': '#Nhatfw3124',
    'database': 'swp391'
}

# C·∫•u h√¨nh k·∫øt n·ªëi PlanetScale
# L∆∞u √Ω: B·∫°n c·∫ßn ƒëi·ªÅn c√°c th√¥ng tin n√†y t·ª´ PlanetScale
planetscale_config = {
    'host': input("Nh·∫≠p PlanetScale host: "),
    'user': input("Nh·∫≠p PlanetScale username: "),
    'password': input("Nh·∫≠p PlanetScale password: "),
    'database': 'swp391',
    'ssl_ca': '/etc/ssl/cert.pem',  # Path m·∫∑c ƒë·ªãnh tr√™n h·∫ßu h·∫øt c√°c h·ªá th·ªëng
    'ssl_verify_cert': True
}

def get_local_connection():
    try:
        return mysql.connector.connect(**local_config)
    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn database local: {err}")
        return None

def get_planetscale_connection():
    try:
        return mysql.connector.connect(**planetscale_config)
    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn PlanetScale: {err}")
        return None

def get_tables(connection):
    cursor = connection.cursor()
    cursor.execute("SHOW TABLES")
    tables = [table[0] for table in cursor.fetchall()]
    cursor.close()
    return tables

def get_table_structure(connection, table_name):
    cursor = connection.cursor()
    cursor.execute(f"SHOW CREATE TABLE {table_name}")
    create_statement = cursor.fetchone()[1]
    cursor.close()
    return create_statement

def get_table_data(connection, table_name):
    cursor = connection.cursor()
    cursor.execute(f"SELECT * FROM {table_name}")
    data = cursor.fetchall()
    
    # L·∫•y th√¥ng tin c√°c c·ªôt
    cursor.execute(f"SHOW COLUMNS FROM {table_name}")
    columns = [column[0] for column in cursor.fetchall()]
    
    cursor.close()
    return data, columns

def create_table(connection, create_statement):
    cursor = connection.cursor()
    try:
        cursor.execute(create_statement)
        connection.commit()
        return True
    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói khi t·∫°o b·∫£ng: {err}")
        return False
    finally:
        cursor.close()

def insert_data(connection, table_name, data, columns):
    if not data:
        print(f"Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ch√®n v√†o b·∫£ng {table_name}")
        return True
    
    cursor = connection.cursor()
    placeholders = ', '.join(['%s'] * len(columns))
    column_names = ', '.join(columns)
    
    insert_query = f"INSERT INTO {table_name} ({column_names}) VALUES ({placeholders})"
    
    try:
        cursor.executemany(insert_query, data)
        connection.commit()
        return True
    except mysql.connector.Error as err:
        print(f"‚ùå L·ªói khi ch√®n d·ªØ li·ªáu v√†o {table_name}: {err}")
        connection.rollback()
        return False
    finally:
        cursor.close()

def migrate_database():
    print("üöÄ B·∫Øt ƒë·∫ßu migrate d·ªØ li·ªáu t·ª´ local ƒë·∫øn PlanetScale...")
    
    # K·∫øt n·ªëi ƒë·∫øn c·∫£ hai database
    local_conn = get_local_connection()
    if not local_conn:
        return
    
    planetscale_conn = get_planetscale_connection()
    if not planetscale_conn:
        local_conn.close()
        return
    
    # L·∫•y danh s√°ch b·∫£ng t·ª´ database local
    tables = get_tables(local_conn)
    print(f"üìã C√°c b·∫£ng c·∫ßn migrate: {', '.join(tables)}")
    
    for table in tables:
        print(f"\n‚è≥ ƒêang migrate b·∫£ng: {table}")
        # L·∫•y c·∫•u tr√∫c b·∫£ng
        create_statement = get_table_structure(local_conn, table)
        
        # T·∫°o b·∫£ng tr√™n PlanetScale
        print(f"  - T·∫°o b·∫£ng {table} tr√™n PlanetScale...")
        
        # S·ª≠a CREATE TABLE statement ƒë·ªÉ ph√π h·ª£p v·ªõi PlanetScale
        # PlanetScale kh√¥ng h·ªó tr·ª£ foreign key constraints
        create_statement = create_statement.replace("ENGINE=InnoDB", "ENGINE=InnoDB")
        
        # X√≥a foreign key constraints
        import re
        create_statement = re.sub(r',\s*CONSTRAINT.*FOREIGN KEY.*REFERENCES.*\)', ')', create_statement)
        
        if create_table(planetscale_conn, create_statement):
            # L·∫•y d·ªØ li·ªáu t·ª´ local
            data, columns = get_table_data(local_conn, table)
            
            # Ch√®n d·ªØ li·ªáu v√†o PlanetScale
            print(f"  - Ch√®n {len(data)} b·∫£n ghi v√†o b·∫£ng {table}...")
            if insert_data(planetscale_conn, table, data, columns):
                print(f"‚úÖ Migrate b·∫£ng {table} th√†nh c√¥ng!")
            else:
                print(f"‚ùå Migrate d·ªØ li·ªáu b·∫£ng {table} th·∫•t b·∫°i!")
        else:
            print(f"‚ùå T·∫°o b·∫£ng {table} tr√™n PlanetScale th·∫•t b·∫°i!")
    
    # ƒê√≥ng k·∫øt n·ªëi
    local_conn.close()
    planetscale_conn.close()
    
    print("\n‚úÖ Ho√†n th√†nh qu√° tr√¨nh migrate!")
    print("\nüîß C·∫≠p nh·∫≠t bi·∫øn m√¥i tr∆∞·ªùng trong Render v·ªõi c√°c th√¥ng tin sau:")
    print(f"DB_HOST={planetscale_config['host']}")
    print(f"DB_USER={planetscale_config['user']}")
    print(f"DB_PASSWORD=********") # Kh√¥ng hi·ªán m·∫≠t kh·∫©u
    print("DB_NAME=swp391")
    print("DB_SSL_MODE=REQUIRED")

if __name__ == "__main__":
    migrate_database() 